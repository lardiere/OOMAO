% GradientSynthesisMstage.m
%   Performs the synthesis of gradient decomposition generated by GradientAnalysis.m
%   averageData = true uses the X and Y matrices to smooth the result
%   suppressHH = true squelches the high frequency branch of synthesis
%                   which can also smooth the result in the presence of
%                   noise
%   Peter Hampton
%   Copyright August 2008

function D = GradientSynthesisPoisson(D, X, Y, averageData, suppressHH)
Scrap = D;  % Scrap is used to facilitate data reordering during synthesis
M = log2(max(size(D)));
twoPMdiv2 = 2^(M-1);
twoPm = 1;
%% Top Left
iSq = 1:2*twoPm;
i1 = iSq(1:end/2);
i2 = iSq(1+end/2:end);
D(i1,i1) = D(i1,i1) - D(i2,i1);
D(i1,i2) = D(i1,i2) - D(i2,i2);
D(i1,i1) = 0.5*(D(i1,i1) - D(i1,i2));
D(i2,i1) = (D(i2,i1) - D(i2,i2));
D(i2,i1) = D(i2,i1) + D(i1,i1);
D(i2,i2) = D(i1,i2) + 2*D(i2,i2);
D(i1,i2) = D(i1,i2) + D(i1,i1);
D(i2,i2) = D(i2,i2) + D(i2,i1);
Scrap(iSq(1:2:end-1),iSq(1:2:end-1)) = D(i1,i1);
Scrap(iSq(1:2:end-1),iSq(2:2:end)) = D(i1,i2);
Scrap(iSq(2:2:end),iSq(1:2:end-1)) = D(i2,i1);
Scrap(iSq(2:2:end),iSq(2:2:end)) = D(i2,i2);
D(iSq,iSq) = Scrap(iSq,iSq);
%% Bottom Right
if suppressHH == false
    iSq = (1:2*twoPm) + twoPMdiv2;
    i1 = iSq(1:end/2);
    i2 = iSq(1+end/2:end);
    D(i1,i1) = D(i1,i1) - D(i2,i1);
    D(i1,i2) = D(i1,i2) - D(i2,i2);
    D(i1,i1) = 0.5*(D(i1,i1) - D(i1,i2));
    D(i2,i1) = (D(i2,i1) - D(i2,i2));
    D(i2,i1) = D(i2,i1) + D(i1,i1);
    D(i2,i2) = D(i1,i2) + 2*D(i2,i2);
    D(i1,i2) = D(i1,i2) + D(i1,i1);
    D(i2,i2) = D(i2,i2) + D(i2,i1);
    Scrap(iSq(1:2:end-1),iSq(1:2:end-1)) = D(i1,i1);
    Scrap(iSq(1:2:end-1),iSq(2:2:end)) = D(i1,i2);
    Scrap(iSq(2:2:end),iSq(1:2:end-1)) = D(i2,i1);
    Scrap(iSq(2:2:end),iSq(2:2:end)) = D(i2,i2);
    D(iSq,iSq) = Scrap(iSq,iSq);
end
for m = 1:M-2
    twoPm = 2^m;
%% Top Left
    iSq = 1:2*twoPm;
    i1 = iSq(1:end/2);
    i2 = iSq(1+end/2:end);
    D(i1,i1) = D(i1,i1) - D(i2,i1);
    D(i1,i2) = D(i1,i2) - D(i2,i2);
    D(i1,i1) = 0.5*(D(i1,i1) - D(i1,i2));
    D(i2,i1) = (D(i2,i1) - D(i2,i2));
    D(i2,i1) = D(i2,i1) + D(i1,i1);
    D(i2,i2) = D(i1,i2) + 2*D(i2,i2);
    D(i1,i2) = D(i1,i2) + D(i1,i1);
    D(i2,i2) = D(i2,i2) + D(i2,i1);
    Scrap(iSq(1:2:end-1),iSq(1:2:end-1)) = D(i1,i1);
    Scrap(iSq(1:2:end-1),iSq(2:2:end)) = D(i1,i2);
    Scrap(iSq(2:2:end),iSq(1:2:end-1)) = D(i2,i1);
    Scrap(iSq(2:2:end),iSq(2:2:end)) = D(i2,i2);
    D(iSq,iSq) = Scrap(iSq,iSq);
%     figure(1);
%     imagesc(D(iSq,iSq))
%     colormap bone
%     pause
%% Bottom Right
    if suppressHH == false
        iSq = (1:2*twoPm) + twoPMdiv2;
        i1 = iSq(1:end/2);
        i2 = iSq(1+end/2:end);
        D(i1,i1) = D(i1,i1) - D(i2,i1);
        D(i1,i2) = D(i1,i2) - D(i2,i2);
        D(i1,i1) = 0.5*(D(i1,i1) - D(i1,i2));
        D(i2,i1) = (D(i2,i1) - D(i2,i2));
        D(i2,i1) = D(i2,i1) + D(i1,i1);
        D(i2,i2) = D(i1,i2) + 2*D(i2,i2);
        D(i1,i2) = D(i1,i2) + D(i1,i1);
        D(i2,i2) = D(i2,i2) + D(i2,i1);
        Scrap(iSq(1:2:end-1),iSq(1:2:end-1)) = D(i1,i1);
        Scrap(iSq(1:2:end-1),iSq(2:2:end)) = D(i1,i2);
        Scrap(iSq(2:2:end),iSq(1:2:end-1)) = D(i2,i1);
        Scrap(iSq(2:2:end),iSq(2:2:end)) = D(i2,i2);
        D(iSq,iSq) = Scrap(iSq,iSq);
    end
%% Average in Extra Data for top left
    if averageData == true 
        ir = 1:2*twoPm-1;
        ic = 2*twoPm + ir;
        iSq = 1:2*twoPm;
    %    for k = 2:M-m
            D(iSq,iSq) = PoissonSolve(D(iSq,iSq),X(ir,ic),Y(ir,ic));
    %    end
%         D(iSq,iSq) = PoissonSolve(D(iSq,iSq),X(ir,ic),Y(ir,ic));
%         D(iSq,iSq) = PoissonSolve(D(iSq,iSq),X(ir,ic),Y(ir,ic));
%% Average in Extra Data for bottom right
        if suppressHH == false
            ir = 1:2*twoPm-1;
            ic = 2*twoPm + ir;
            ir = ir + twoPMdiv2;
            iSq = (1:2*twoPm) + twoPMdiv2;
       %     for k = 2:M-m
                D(iSq,iSq) = PoissonSolve(D(iSq,iSq),Y(ir,ic),X(ir,ic));
       %     end
%             D(iSq,iSq) = PoissonSolve(D(iSq,iSq),X(ir,ic),Y(ir,ic));
        end
    end
end

m = M-1;
twoPm = 2^m;
%% Full image
iSq = 1:2*twoPm;
i1 = iSq(1:end/2);
i2 = iSq(1+end/2:end);
if suppressHH == true;
    D(i2,i2) = 0;
end
D(i1,i1) = D(i1,i1) - D(i2,i1);
D(i1,i2) = D(i1,i2) - D(i2,i2);
D(i1,i1) = 0.5*(D(i1,i1) - D(i1,i2));
D(i2,i1) = (D(i2,i1) - D(i2,i2));
D(i2,i1) = D(i2,i1) + D(i1,i1);
D(i2,i2) = D(i1,i2) + 2*D(i2,i2);
D(i1,i2) = D(i1,i2) + D(i1,i1);
D(i2,i2) = D(i2,i2) + D(i2,i1);
Scrap(iSq(1:2:end-1),iSq(1:2:end-1)) = D(i1,i1);
Scrap(iSq(1:2:end-1),iSq(2:2:end)) = D(i1,i2);
Scrap(iSq(2:2:end),iSq(1:2:end-1)) = D(i2,i1);
Scrap(iSq(2:2:end),iSq(2:2:end)) = D(i2,i2);
D(iSq,iSq) = Scrap(iSq,iSq);
%% Average in Extra Data for Full image
if averageData == true
        ir = 1:2*twoPm-1;
        ic = 2*twoPm + ir;
        iSq = 1:2*twoPm;

         D(iSq,iSq) = PoissonSolve(D(iSq,iSq),X(ir,ic),Y(ir,ic));
 %        D(iSq,iSq) = PoissonSolve(D(iSq,iSq),X(ir,ic),Y(ir,ic));
%         D(iSq,iSq) = PoissonSolve(D(iSq,iSq),X(ir,ic),Y(ir,ic));
end
